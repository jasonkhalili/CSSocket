"use strict";

var _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

module.exports = function (React) {

  var classSet = require("classnames");

  var Unit = React.createClass({
    displayName: "Unit",

    propTypes: {
      className: React.PropTypes.string.isRequired,
      type: React.PropTypes.string.isRequired,
      color: React.PropTypes.string.isRequired
    },

    render: function render() {
      var _props = this.props;
      var className = _props.className;
      var type = _props.type;
      var color = _props.color;
      var value = _props.value;
      var disabled = _props.disabled;
      var active = _props.active;
      var loading = _props.loading;

      var other = _objectWithoutProperties(_props, ["className", "type", "color", "value", "disabled", "active", "loading"]);

      switch (type) {

        case "link":
          return React.createElement(
            "a",
            _extends({}, other, {
              className: this._generateClassName(),
              "data-value": value }),
            this.props.children
          );

        case "icon":
          return React.createElement(
            "i",
            _extends({}, other, {
              className: this._generateClassName(),
              "data-value": value }),
            this.props.children
          );

        case "img":
          return React.createElement(
            "img",
            _extends({}, other, {
              className: this._generateClassName() }),
            this.props.children
          );

        case "div":
        default:
          return React.createElement(
            "div",
            _extends({}, other, {
              className: this._generateClassName(),
              "data-value": value }),
            this.props.children
          );
      }
    },

    _generateClassName: function _generateClassName() {
      var className = this.props.className;

      if (this.props.color != "null") {
        className += " " + this.props.color;
      }

      className += " " + classSet({
        disabled: this.props.disabled,
        active: this.props.active,
        loading: this.props.loading,
        focus: this.props.focus,
        error: this.props.error,
        completed: this.props.completed,
        "read-only": this.props.readOnly
      });

      return className;
    }
  });

  return Unit;
};